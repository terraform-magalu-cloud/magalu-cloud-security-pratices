# Define o nome do release draft. $NEXT_PATCH_VERSION √© uma vari√°vel autom√°tica.
name-template: 'v$NEXT_PATCH_VERSION'

# Define o nome da tag. $NEXT_PATCH_VERSION √© uma vari√°vel autom√°tica.
tag-template: 'v$NEXT_PATCH_VERSION'

# Define as categorias de mudan√ßas baseadas nas labels dos Pull Requests.
# A ordem aqui define a ordem no release notes.
categories:
  - title: 'üöÄ Novas Funcionalidades (Features)'
    labels:
      - 'feature'
      - 'enhancement'
  - title: 'üêõ Corre√ß√µes de Bugs (Bug Fixes)'
    labels:
      - 'fix'
      - 'bug'
  - title: 'üõ†Ô∏è Manuten√ß√£o e Performance'
    labels:
      - 'chore'
      - 'refactor'
      - 'performance'
  - title: 'üìö Documenta√ß√£o'
    labels:
      - 'documentation'
      - 'docs'
  - title: 'üîí Seguran√ßa'
    labels:
      - 'security'

# Pull Requests com estas labels ser√£o ignorados e n√£o aparecer√£o no release.
exclude-labels:
  - 'skip-changelog'
  - 'invalid'

# Controla como a pr√≥xima vers√£o √© calculada.
# O Release Drafter verifica as labels dos PRs inclu√≠dos e escolhe a maior mudan√ßa.
version-resolver:
  # Se um PR tiver a label 'major', incrementa a vers√£o Major (ex: 1.0.0 -> 2.0.0)
  major:
    labels:
      - 'major'
      - 'breaking-change'
  # Se tiver 'minor', incrementa a Minor (ex: 1.0.0 -> 1.1.0)
  minor:
    labels:
      - 'feature'
      - 'enhancement'
  # Por padr√£o, incrementa o Patch (ex: 1.0.0 -> 1.0.1)
  patch:
    labels:
      - 'fix'
      - 'bug'
      - 'docs'
      - 'chore'
  # O default se nenhuma label acima for encontrada.
  default: patch

# Permite "limpar" os t√≠tulos dos PRs antes de inclu√≠-los.
# √ötil para remover c√≥digos de JIRA, por exemplo.
replacers:
  # Remove qualquer "[JIRA-123] " do in√≠cio do t√≠tulo.
  - search: '/\[[A-Z]+-\d+\]\s/g'
    replace: ''

# O template principal do seu release notes.
# $CATEGORIES √© preenchido com a lista de PRs agrupados pelas categorias acima.
# $CONTRIBUTORS lista as pessoas que contribu√≠ram.
template: |
  ## O que mudou nesta vers√£o?