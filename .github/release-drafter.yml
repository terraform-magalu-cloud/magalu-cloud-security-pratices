# Configura√ß√£o para a action 'release-drafter'
# https://github.com/release-drafter/release-drafter

# Define o padr√£o para o nome do rascunho de release.
# $NEXT_PATCH_VERSION, $NEXT_MINOR_VERSION, $NEXT_MAJOR_VERSION s√£o preenchidos automaticamente.
name-template: 'v$NEXT_PATCH_VERSION'

# Define o padr√£o para a tag Git que ser√° criada.
tag-template: 'v$NEXT_PATCH_VERSION'

# Define como os commits s√£o categorizados no changelog.
categories:
  - title: 'üöÄ Features'
    labels:
      - 'feature'
      - 'enhancement'
    # Esta se√ß√£o 'autolabeler' √© opcional mas √∫til.
    # Ela pode adicionar labels automaticamente a um PR com base no t√≠tulo ou nome da branch.
    autolabeler:
      - label: 'feature'
        branch:
          - '/^feat\/.+/'
        title:
          - '/^feat(\(.*\))?!?: .*/'

  - title: 'üêõ Bug Fixes'
    labels:
      - 'fix'
      - 'bugfix'
      - 'bug'
    autolabeler:
      - label: 'bug'
        branch:
          - '/^fix\/.+/'
        title:
          - '/^fix(\(.*\))?!?: .*/'
          
  - title: 'üìñ Documentation'
    labels:
      - 'documentation'
    autolabeler:
      - label: 'documentation'
        title:
          - '/^docs(\(.*\))?!?: .*/'

  - title: 'üßπ Maintenance & Refactoring'
    labels:
      - 'chore'
      - 'refactor'
      - 'style'
    autolabeler:
      - label: 'chore'
        title:
          - '/^chore(\(.*\))?!?: .*/'
          - '/^refactor(\(.*\))?!?: .*/'
          - '/^style(\(.*\))?!?: .*/'
          
  - title: 'üõ°Ô∏è Security'
    labels:
      - 'security'
    autolabeler:
      - label: 'security'
        title:
          - '/^security(\(.*\))?!?: .*/'

# Exclui PRs com estas labels do changelog final.
exclude-labels:
  - 'skip-changelog'

# O template principal para o corpo do release.
# $CHANGES ser√° preenchido com a lista de commits categorizados.
template: |
  ## What's Changed in this Release
  
  $CHANGES

# Configura√ß√µes de versionamento.
# O 'release-drafter' ir√° incrementar a vers√£o (patch, minor, major)
# com base nos commits inclu√≠dos desde o √∫ltimo release.
version-resolver:
  major:
    labels:
      - 'major'
    # Um commit com 'BREAKING CHANGE:' no corpo ou '!' no t√≠tulo dispara um 'major'.
    commits:
      breaking-change: true
  minor:
    labels:
      - 'minor'
    # Um commit 'feat:' dispara um 'minor'.
    commits:
      scope:
        feat: true
  patch:
    labels:
      - 'patch'
    # Commits 'fix:', 'perf:', etc., disparam um 'patch'.
    commits:
      scope:
        fix: true
        perf: true
  default: patch